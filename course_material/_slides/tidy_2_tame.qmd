---
# title: Taming data
format:
  revealjs:
    theme: FACE-IT_pres.scss
    self-contained: true
    transition: slide
editor: source
---

# Taming data {background-color="#008980" style="text-align: center"}

*Robert Schlegel*

```{r tidy-2-opts, echo=FALSE}
knitr::opts_chunk$set(
  warning = FALSE, 
  message = FALSE,
  echo = TRUE
)
```

## Problem

-   Once the data are tidy, how do we manipulate them?
-   Are there any consistent approaches to this?
-   Can this be used to perform analyses?

## Solution

-   There are five primary functions we will focus on here
-   We will see how the use of pre-existing logic tools can work for us
-   We end with some examples of `summarise()`

## Setup

```{r}
library(tidyverse) # All-in-one

library(lubridate) # For working with dates

load("../data/OISST_mangled.RData") # For examples
```

## **tidy workflow**

The transformation of ones data should be the third step in any workflow, after the tidying of the data.

```{r, echo = FALSE, out.width = "100%", fig.align = "center", fig.cap = "Data transforming in the data processing pipeline. Reproduced from [R for Data Science](http://r4ds.had.co.nz/workflow-basics.html)"}
knitr::include_graphics("slide_images/data-science-wrangle.png")
```

## **tidy transformation**

There are five primary data transformation functions that we will focus on here:  

-   Arrange observations (rows) with `arrange()`  
-   Filter observations (rows) with `filter()`  
-   Select variables (columns) with`select()`  
-   Create new variables (columns) with `mutate()`  
-   Summarise data (rows+columns) with `summarise()`  

## Comparison operators

-   We use the assignment operator (`<-`) to assign code to an object in our environment
-   Likewise, comparison operators are symbols used to compare different objects
-   We will see these symbols often in the 'real world'

## Comparison operators

-   Greater than: `>`  
-   Greater than or equal to: `>=`  
-   Less than: `<`  
-   Less than or equal to: `<=`  
-   Equal to: `==`  
-   Not equal to: `!=`  

## Comparison operators

It is important here to note that `==` is for comparisons and `=` is for maths. They are **not** interchangeable, as we may see in the following code chunk. This is one of the more common mistakes one makes when writing code.

```{r, error=TRUE}
OISST1 %>% 
  filter(site = "Svalbard")
```

## Logical operators

-   Comparison operators are used to make direct comparisons between specific things
-   Logical operators are used more broadly when making logical arguments
-   R makes use of the same *Boolean logic* as many other platforms, including Google

## Logical operators

-   and: `&`  
-   or: `|`  
-   not: `!`  
  
## Logical operators

```{r}
OISST1_sub <- OISST1 %>% 
  filter(site == "Med", month(t) == 12 | month(t) == 1)
```

::: columns
::: {.column}
```{r}
head(OISST1_sub)
```
:::

::: {.column}
```{r, echo=FALSE}
tail(OISST1_sub)
```
:::
:::

## `arrange()` observations (rows) 

::: columns
::: {.column}
```{r}
OISST1 %>% arrange(site, temp) %>% head()
```
:::

::: {.column}
```{r}
OISST1 %>% arrange(site, desc(temp)) %>% head()
```
:::
:::

## `filter()` observations (rows)

```{r tidier-filter, eval=FALSE}
SACTN %>% 
  filter(site == "Humewood", year(date) == 1990)
```
```{r tidier-filter-ghost, echo=FALSE}
filter(SACTN, site == "Humewood", year(date) == 1990)[1:10,]
```

Remember to use the assignment operator (`<-`, keyboard shortcut **alt -**) if one wants to create an object in the environment with the new results.

```{r tidier-filter-assign, eval=FALSE}
humewood_90s <- SACTN %>% 
  filter(site == "Humewood", year(date) %in% seq(1990, 1999, 1))
```

It must be mentioned that `filter()` also automatically removes any rows in the filtering column that contain `NA` values. Should one want to keep rows that contain missing values, insert the `is.na()` function into the line of code in question. To illustrate this let's filter the temperatures for the Port Nolloth data collected by the DEA that were at or below 11°C OR were missing values. We'll put each argument on a separate line to help keep things clear. Note how R automatically indents the last line in this chunk to help remind us that they are in fact part of the same argument. Also note how I have put the last bracket at the end of this argument on it's own line. This is not required, but I like to do so as it is a very common mistake to forget the last bracket.

```{r tidier-filter-NA, eval=FALSE}
SACTN %>% 
  filter(site == "Port Nolloth", # First give the site to filter
         src == "DEA", # Then specify the source
         temp <= 11 | # Temperatures at or below 11°C OR
           is.na(temp) # Include missing values
         )
```

## Select variables (columns) with`select()`

When one loads a dataset that contains more columns than will be useful or required it is preferable to shave off the excess. We do this with the `select()` function. In the following four examples we are going to remove the `depth` and `type` columns. There are many ways to do this and none are technically better or faster. So it is up to the user to find a favourite technique.

```{r tidier-sect-1, eval=FALSE}
# Select columns individually by name
SACTN %>% 
  select(site, src, date, temp)

# Select all columns between site and temp like a sequence
SACTN %>% 
  select(site:temp)

# Select all columns except those stated individually
SACTN %>% 
  select(-date, -depth)

# Select all columns except those within a given sequence
  # Note that the '-' goes outside of a new set of brackets
  # that are wrapped around the sequence of columns to remove
SACTN %>% 
  select(-(date:depth))
```

We may also use `select()` to reorder the columns in a dataframe. In this case the inclusion of the `everything()` function may be a useful shortcut as illustrated below.

```{r tidier-select-2, eval=FALSE}
# Change up order by specifying individual columns
SACTN %>% 
  select(temp, src, date, site)

# Use the everything function to grab all columns 
# not already specified
SACTN %>% 
  select(type, src, everything())

# Or go bananas and use all of the rules at once
  # Remember, when dealing with tidy data,
  # everything may be interchanged
SACTN %>% 
  select(temp:type, everything(), -src)
```

## Create new variables (columns) with `mutate()`

When one is performing data analysis/statistics in R this is likely because it is necessary to create some new values that did not exist in the raw data. The previous three functions we looked at (`arrange()`, `filter()`, `select()`) will prepare us to create new data, but do not do so themselves. This is when we need to use `mutate()`. We must however be very mindful that `mutate()` is only useful if we want to create new variables (columns) that are a function of one or more *existing* columns. This means that any column we create with `mutate()` will always have the same number of rows as the dataframe we are working with. In order to create a new column we must first tell R what the name of the column will be, in this case let's create a column named `kelvin`. The second step is to then tell R what to put in the new column. AS you may have guessed, we are going to convert the `temp` column into Kelvin (°K) by adding 273.15 to every row.

```{r tidier-mutate-1, eval=FALSE}
SACTN %>% 
  mutate(kelvin = temp + 273.15))
```
```{r tidier-mutate-1-ghost, echo=FALSE}
mutate(SACTN, kelvin = temp + 273.15)[1:10,]
```

This is a very basic example and `mutate()` is capable of much more than simple addition. We will get into some more exciting examples during the next session.

## Summarise variables (columns) with `summarise()`

Finally this brings us to the last tool for this section. To create new columns we use `mutate()`, but to calculate any sort of summary/statistic from a column that will return fewer rows than the dataframe has we will use `summarise()`. This makes `summarise()` much more powerful than the other functions in this section, but because it is able to do more, it can also be more unpredictable, making it's use potentially more challenging. We will almost always end op using this function in our work flows however so it behoves us to become well acquainted with it. The following chunk very simply calculates the overall mean temperature for the entire SACTN.

```{r tidier-summarise-1}
SACTN %>% 
  summarise(mean_temp = mean(temp, na.rm = TRUE))
```

Note how the above chunk created a new dataframe. This is done because it cannot add this one result to the previous dataframe due to the mismatch in the number of rows. Were we to want to create additional columns with other summaries we may do so within the same `summarise()` function. These multiple summaries are displayed on individual lines in the following chunk to help keep things clear.

```{r tidier-summarise-2}
SACTN %>% 
  summarise(mean_temp = mean(temp, na.rm = TRUE),
            sd_temp = sd(temp, na.rm = TRUE),
            min_temp = min(temp, na.rm = TRUE),
            max_temp = max(temp, na.rm = TRUE)
            )
```

Creating summaries of the *entire* SACTN dataset in this way is not appropriate as we should not be combining time series from such different parts of the coast. In order to calculate summaries within variables we will need to learn how to use `group_by()`, which in turn will first require us to learn how to chain multiple functions together within a pipe (`%>%`). That is how we will begin the next session for today. Finishing with several tips on how to make our data the tidiest that it may be.

