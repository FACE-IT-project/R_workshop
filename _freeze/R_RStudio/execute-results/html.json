{
  "hash": "e8836a5888bf122231ef7f1dcd6941f5",
  "result": {
    "markdown": "---\ntitle: \"Setting up R and Rstudio\"\nsidebar: false\n---\n\n\nBefore we can begin an **R** workshop, we need to make sure everyone has access to a computer with [R](http://cran.r-project.org) and [RStudio](http://www.rstudio.com) installed. The process for how to do this is detailed below, followed by a brief introduction to these two pieces of software and what the difference is between them.\n\nNB: If you are not using your own computer please make the instructor aware of this as it is assumed that all participants will be using their personal (or university/institutions given) laptops.\n\n## Installing R\n\nInstalling R on your machine is a straightforward process. Follow these steps:\n\n1.\tGo to the [CRAN](http://cran.r-project.org) (Comprehensive R Archive Network) website. If you type ‘r’ into Google it is the first entry\n\n2.\tChoose to download R for Linux, Mac, or Windows\n\n3.\tFor Windows users selecting 'base' will link you to the download file, follow the prompts to install\n\n4.\tFor Mac users, choose the version relevant to your Operating System, follow the prompts after downloading\n\n5.\tIf you are a Linux user, you know what to do!\n\n## Installing RStudio\n\nAlthough R can run in its own console or in a terminal window (Mac and Linux; the Windows command line is a bit limiting), we will use RStudio in this Workshop. RStudio is a free front-end to R for Windows, Mac, or Linux (*i.e.*, R is working in the background). It makes working with R easier, more organised and productive, especially for new users. There are other front-ends, but RStudio is the most popular. To install:\n\n1.\tGo to the [posit](https://posit.co/) website\n\n2.\tClick the 'Download RStudio' button in the top right of the page\n\n3.\tScroll down to click the 'Download' button under RStudio Desktop Free\n\n4.  For Windows users click the 'Download RStudio Desktop for Windows' button under Step 2 on the page\n\n5.  For all other Operating Systems, scroll down further and select the corresponding file\n\n6.  After downloading, follow the prompts to install RStudio\n\n## Setting up the workspace\n\n### General settings\n\nBefore we start using RStudio (which is a code editor and environment that runs R) let's first set it up properly. Find the 'Tools' ('Preferences') menu item, navigate to 'Global Options' ('Code Editing'). From here we have a very wide range of options for the functionality of RStudio. At the moment we will leave the general settings to their default.\n\n### Customising appearance\n\nRStudio is highly customisable. Under the **Appearance** tab under 'Tools'/'Global Options' you can see all of the different themes that come with RStudio. We recommend choosing a theme with a black background (e.g. Chaos) as this will be easier on your eyes and your computer. It is also good to choose a theme with a sufficient amount of contrast between the different colours used to denote different types of objects/values in your code. \n\n## Configuring panes\n\nYou cannot rearrange panes (see below) in RStudio by dragging them, but you can alter their position via the **Pane Layout** tab in the 'Tools'/'Global Options' ('RStudio'/'Preferences' – for Mac). You may arrange the panes as you would prefer however we recommend that during the duration of this workshop you leave them in the default layout.\n\n# The Rproject\nA very nifty way of managing workflow in RStudio is through the built-in functionality of the Rproject. We do not need to install any packages or change any settings to use these. Creating a new project is a very simple task, as well. For this course we will be using the `Intro_R_Workshop.Rproj` file you downloaded with the course material so that we are all running identical projects. This will prevent a lot of issues by ensuring we are doing things by the same standard. Better yet, an Rproject integrates seamlessly into version control software (e.g. GitHub) and allows for instant world class collaboration on any research project. To initialise the 'Intro_R_Workshop' project on your machine please find where you saved `Intro_R_Workshop.Rproj` file and click on it. We will cover the concepts and benefits of an Rproject more as we move through the course.\n\n## Installing packages\n\n\n\n\n\nThe most common functions used in R are contained within the **`base`** package; this makes R useful 'out of the box.' However, there is extensive additional functionality that is being expanded all the time through the use of packages. Packages are simply collections of code called functions that automate complex mathematical or statistical tasks. One of the most useful features of R is that users are continuously developing new packages and making them available for free. You can find a comprehensive list of available packages on the [CRAN website](https://cran.r-project.org/web/packages/). There are currently (``2022-11-03``) ``18807`` packages available for R!\n\nIf the thought of searching for and finding R packages is daunting, a good place to start is the [R Task View](http://cran.r-project.org/web/views/) page. This page curates collections of packages for general tasks you might encounter, such as Experimental Design, Meta-Analysis, or Multivariate Analysis. Go and have a look for yourself, you might be surprised to find a good explanation of what you need.\n\nAfter clicking 'Tools'/'Install Packages', type in the package name **`tidyverse`** in the 'Packages' text box (note that it is case sensitive) and select the Install button. The **Console** will run the code needed to install the package, and then provide some commentary on the installation of the package and any of its dependencies (*i.e.*, other R packages needed to run the required package).\n\nThe installation process makes sure that the functions within the packages contained within the **`tidyverse`** are now available on your computer, but to avoid potential conflicts in the names of functions, it will not load these automatically. To make R 'know' about these functions in a particular session, you need either to load the package via ticking the checkbox for that package in the **Packages** tab, or execute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nSince we will develop the habit of doing all of our analyses from R scripts, it is best practice to simply list all of the libraries to be loaded right at the start of your script. Comments may be used to remind your future-self (to quote Hadley Wickham) what those packages are for.\n\n> **Copying code from RStudio**  \nHere you saw RStudio execute the R code needed to install (using `install.packages()`) and load (using `library()`) the package, so if you want to include these in one of your programs, just copy the text it executes. Note that you need only install the current version of a package once, but it needs to be loaded at the beginning of each R session.\n\n> **Question**\nWhy is it best practice to include packages you use in your R program explicitly?\n\n## The panes of RStudio\n\nRStudio has four main panes each in a quadrant of your screen: **Source Editor**, **Console**, **Workspace Browser** (and **History**), and **Plots** (and **Files**, **Packages**, **Help**). These can also be adjusted under the 'Preferences' menu. Note that there might be subtle differences between RStudio installations on different operating systems. We will discuss each of the panes in turn.\n\n### Source Editor\n\nGenerally we will want to write programs longer than a few lines. The **Source Editor** can help you open, edit and execute these programs. Let us open a simple program:\n\n1. Use Windows Explorer (Finder on Mac) and navigate to the file `BONUS/the_new_age.R`.\n\n2. Now make RStudio the default application to open `.R` files (right click on the file Name and set RStudio to open it as the default if it isn't already)\n\n3. Now double click on the file – this will open it in RStudio in the **Source Editor** in the top left pane.\n\nNote `.R` files are simply standard text files and can be created in any text editor and saved with a `.R` (or `.r`) extension, but the Source editor in RStudio has the advantage of providing syntax highlighting, code completion, and smart indentation. You can see the different colours for numbers and there is also highlighting to help you count brackets (click your cursor next to a bracket and push the right arrow and you will see its partner bracket highlighted). We can execute R code directly from the Source Editor. Try the following (for Windows machines; for Macs replace **Ctrl** with **Cmd**):\n\n* Execute a single line (Run icon or **Ctrl+Enter**). Note that the cursor can be anywhere on the line and one does not need to highlight anything --- do this for the code on line 2\n* Execute multiple lines (Highlight lines with the cursor, then Run icon or **Ctrl+Enter**) --- do this for line 3 to 6\n* Execute the whole script (Source icon or **Ctrl+Shift+Enter**)\n\nNow, try changing the x and/or y axis labels on line 18 and re-run the script.\n\nNow let us save the program in the **Source Editor** by clicking on the file symbol (note that the file symbol is greyed out when the file has not been changed since it was last saved).\n\nAt this point, it might be worth thinking a bit about what the program is doing. R requires one to think about what you are doing, not simply clicking buttons like in some other software systems which shall remain nameless for now... Scripts execute sequentially from top to bottom. Try and work out what each line of the program is doing and discuss it with your neighbour. Note, if you get stuck, try using R's help system; accessing the help system is especially easy within RStudio --- see if you can figure out how to use that too.\n\n> **Comments**  \nThe hash (`#`) tells R not to run any of the text on that line to the right of the symbol. This is the standard way of commenting R code; it is VERY good practice to comment in detail so that you can understand later what you have done.\n\n### Console\n\nThis is where you can type code that executes immediately. This is also known as the command line. Throughout the notes, we will represent code for you to execute in R as a different font.\n\n> **Type it in!**\nAlthough it may appear that one could copy code from this PDF into the **Console**, you really shouldn't. The first reason is that you might unwittingly copy invisible PDF formatting errors into R, which will make the code fail. But more importantly, typing code into the **Console** yourself gives you the practice you need, and allows you to make (and correct) your own errors. This is an invaluable way of learning and taking shortcuts now will only hurt you in the long run.\n\nEntering code in the command line is intuitive and easy. For example, we can use R as a calculator by typing into the Console (and pressing **Enter** after each line):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n6 * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n\n```{.r .cell-code}\n5 + 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\n2 ^ 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nNote that spaces are optional around simple calculations.\n\nWe can also use the assignment operator `<-` to assign any calculation to a variable so we can access it later (the `=` sign would work, too, but it's bad practice to use it… and we'll talk about this as we go):\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 2\nb <- 7\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\nTo type the assignment operator (`<-`) push the following two keys together: **alt -**. There are many keyboard shortcuts in R and we will introduce them as we go along.\n\nSpaces are also optional around assignment operators. It is good practice to use single spaces in your R scripts, and the **alt -** shortcut will do this for you automagically. Spaces are not only there to make the code more readable to the human eye, but also to the machine. Try this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd<-2\nd < -2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nNote that the first line of code assigns `d` a value of `2`, whereas the second statement asks R whether this variable has a value less than 2. When asked, it responds with FALSE. If we hadn't used spaces, how would R have known what we meant?\n\nAnother important question here is, is R case sensitive? Is `A` the same as `a`? Figure out a way to check for yourself.\n\nWe can create a vector in R by using the combine `c()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napples <- c(5.3, 3.8, 4.5)\n```\n:::\n\n\nA vector is a one-dimensional array (*i.e.*, a list of numbers), and this is the simplest form of data used in R (you can think of a single value in R as just a very short vector). We'll talk about more complex (and therefore more powerful) types of data structures as we go along.\n\nIf you want to display the value of apples type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napples\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.3 3.8 4.5\n```\n:::\n:::\n\n\nFinally, there are default functions in R for nearly all basic statistical analyses, including `mean()` and `sd()` (standard deviation):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(apples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.533333\n```\n:::\n\n```{.r .cell-code}\nsd(apples)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7505553\n```\n:::\n:::\n\n\n> **Variable names**  \nIt is best not to use `c` as the name of a value or array. Why? What other words might not be good to use?\n\nOr try this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(sd(apples), 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.75\n```\n:::\n:::\n\n\n> **Question**  \nWhat did we do above? What can you conclude from those functions?\n\nRStudio supports the automatic completion of code using the **Tab** key. For example, type the three letters `app` and then the **Tab** key. What happens?\n\nThe code completion feature also provides brief inline help for functions whenever possible. For example, type `mean()` and press the **Tab** key.\n\nThe RStudio **Console** automagically maintains a 'history' so that you can retrieve previous commands, a bit like your Internet browser or Google (*see the code in: BONUS/mapping_yourself.Rmd*). On a blank line in the **Console**, press the up arrow, and see what happens.\n\nIf you wish to review a list of your recent commands and then select a command from this list you can use **Ctrl+Up** to review the list (**Cmd+Up** on the Mac). If you prefer a 'bird's eye' overview of the R command history, you may also use the RStudio History pane (see below).\n\nThe **Console** title bar has a few useful features:\n\n1.\tIt displays the current R working directory (more on this later)\n\n2.\tIt provides the ability to interrupt R during a long computation (a stop sign will appear whilst code is running)\n\n3.\tIt allows you to minimise and maximise the **Console** in relation to the **Source pane** using the buttons at the top-right or by double-clicking the title bar)\n\n### Environment and History panes\n\nThe **Environment** pane is very useful as it shows you what objects (*i.e.*, dataframes, arrays, values and functions) you have in your environment (workspace). You can see the values for objects with a single value and for those that are longer R will tell you their class. When you have data in your environment that have two dimensions (rows and columns) you may click on them and they will appear in the **Source Editor** pane like a spreadsheet. \n\nYou can then go back to your program in the **Source Editor** by clicking its tab or closing the tab for the object you opened. Also in the **Environment** is the History tab, where you can see all of the code executed for the session. If you double-click a line or highlight a block of lines and then double-click those, you can send it to the **Console** (*i.e.*, run them).\n\nTyping the following into the **Console** will list everything you've loaded into the Environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"        \"apples\"   \"b\"        \"d\"        \"pkgs_lst\" \"url\"     \n```\n:::\n:::\n\n\nWhat do we have loaded into our environment? Did all of these objects come from one script, or more than one? How can we tell where an object was generated?\n\n### Files, Plots, Packages, Help, and Viewer panes\n\nThe last pane has a number of different tabs. The Files tab has a navigable file manager, just like the file system on your operating system. The **Plot** tab is where graphics you create will appear. The **Packages** tab shows you the packages that are installed and those that can be installed (more on this just now). The **Help** tab allows you to search the R documentation for help and is where the help appears when you ask for it from the **Console**.\n\nMethods of getting help from the **Console** include...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n...or:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(mean)\n```\n:::\n\n\nWe will go into this in more detail in the next session.\n\nTo reproduced Figure \\@ref(fig:ggplot2-1) in the **Plot** tab, simply copy and paste the following code into the **Console**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nx <- seq(0, 2, by = 0.01)\ny <- 2 * sin(2 * pi * (x - 1/4))\nggplot() +\n  geom_point(aes(x = x, y = y), shape = 21, col = \"salmon\", fill = \"white\")\n```\n\n::: {.cell-output-display}\n![The same plot as above, but assembled with __ggplot2__.](R_RStudio_files/figure-html/ggplot2-1-1.png){width=672}\n:::\n:::\n\n\n## Resources\n\nBelow you can find the source code to some books and other links to websites about R. With some of the technical skills you'll learn in this course you'll be able to download the source code, compile the book on your own computer and arrive at the fully formatted (typeset) copy of the books that you can purchase for lots of money:\n\n* [ggplot2. Elegant Graphics for Data Analysis](https://github.com/hadley/ggplot2-book) --- the gold-standard in R graphics\n* [R for Data Science](http://r4ds.had.co.nz/workflow-basics.html) --- data analysis using tidy principles\n* [R Markdown](http://rmarkdown.rstudio.com) --- reproducible reports in R\n* [bookdown: Authoring Books and Technical Documents with R Markdown](https://bookdown.org/yihui/bookdown) --- writing books in R\n* [Shiny](https://shiny.rstudio.com) --- interactive website driven by R\n\n## Style and code conventions\n\nEarly on, develop the habit of unambiguous and consistent style and formatting when writing your code, or anything else for that matter. Pay attention to detail and be pedantic. This will benefit your scientific writing in general. Although many R commands rely on precisely formatted statements (code blocks), style can nevertheless to *some extent* have a personal flavour to it. The key is *consistency*. In this book we use certain conventions to improve readability. We use a consistent set of conventions to refer to code, and in particular to typed commands and package names.\n\n  * Package names are shown in a bold font over a grey box, *e.g.* __`tidyr`__.\n  * Functions are shown in normal font followed by parentheses and also over a grey box , *e.g.* `plot()`, or `summary()`.\n  * Other R objects, such as data, function arguments or variable names are again in normal font over a grey box, but without parentheses, *e.g.* `x` and `apples`.\n  * Sometimes we might directly specify the package that contains the function by using two colons, *e.g.* `dplyr::filter()`.\n  * Commands entered onto the R command line (console) and the output that is returned will be shown in a code block, which is a light grey background with code font. The commands entered start at the beginning of a line and the output it produces is preceded by `R>`, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(n = 10, mean = 0, sd = 13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  13.1619587  15.5830309  23.0442888  14.5541435  -1.2511624   8.5472444\n [7] -14.5035285  -0.3808704  -6.4690712 -20.3784512\n```\n:::\n:::\n\n\nConsult these resources for more about R code style :\n\n  * [Google's R style guide](https://google.github.io/styleguide/Rguide.xml)\n  * [The tidyverse style guide](http://style.tidyverse.org)\n  * [Hadley Wickham's advanced R style guide](http://adv-r.had.co.nz/Style.html)\n",
    "supporting": [
      "R_RStudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}