{
  "hash": "3f245fa3f403c9057f1c313192aa7dc6",
  "result": {
    "markdown": "---\ntitle: \"Plotting in R\"\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\nThough it may have started as statistical software, R has moved far beyond it's mundane origins. The language is now capable of a wide range of applications, some of which you have already seen, and some others you will see over the rest of this course. For Day 2 we are going to go more in-depth on the concept of data visualisation via **`ggplot2`**. One should also note that there is a staggering amount of support for this package in the form of extension packages covering a range of visualisations and applications. A full [gallery](https://r-graph-gallery.com/) of the possible visualisations has been assembled and is worth a look.\n\n## Slides and application exercises\n\n::: slide-deck\n**Plotting 1: Basics**\n\n::: slides\n[Slides](https://face-it-project.github.io/R_workshop/course_material/_slides/plots_1_basics.html)\n:::\n\n::: source\n[Source](https://github.com/FACE-IT-project/R_workshop/tree/main/course_material/_slides/plots_1_basics.qmd)\n:::\n:::\n\n\n## Faceting one figure\n\nFaceting a single figure is built into **`ggplot2`** from the ground up and will work with virtually anything that could be passed to the `aes()` function. Here we see how to create an individual facet for each `Diet` within the `ChickWeight` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nChickWeight <- datasets::ChickWeight\n\n# Create faceted figure\nggplot(data = ChickWeight, aes(x = Time, y = weight, colour = Diet)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") + # Note the `+` sign here\n  facet_wrap(~Diet, ncol = 2) + # This is the line that creates the facets\n  labs(x = \"Days\", y = \"Mass (g)\")\n```\n:::\n\n\n## New figure types\n\nBefore we can create a gridded figure of several smaller figures, we need to learn how to create a few new types of figures first. The code for these different types is shown below. Some of the figure types we will learn how to use now do not work well with the full `ChickWeight` dataset. Rather we will want only the weights from the final day of collection. To filter only these data we will need to use a bit of the 'tidy' code we saw on Day 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nChickLast <- ChickWeight %>% \n  filter(Time == 21)\n```\n:::\n\n\n### Line graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_1 <- ggplot(data = ChickWeight, aes(x = Time, y = weight, colour = Diet)) +\n  geom_point() +\n  geom_line(aes(group = Chick)) +\n  labs(x = \"Days\", y = \"Mass (g)\")\nline_1\n```\n:::\n\n\n### Linear model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_1 <- ggplot(data = ChickWeight, aes(x = Time, y = weight, colour = Diet)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Days\", y = \"Mass (g)\")\nlm_1\n```\n:::\n\n\n### Histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that we are using 'ChickLast', not 'ChickWeight'\nhistogram_1 <- ggplot(data = ChickLast, aes(x = weight)) +\n  geom_histogram(aes(fill = Diet), position = \"dodge\", binwidth = 100) +\n  labs(x = \"Final Mass (g)\", y = \"Count\")\nhistogram_1\n```\n:::\n\n\n### Boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that we are using 'ChickLast', not 'ChickWeight'\nbox_1 <- ggplot(data = ChickLast, aes(x = Diet, y = weight)) +\n  geom_boxplot(aes(fill = Diet)) +\n  labs(x = \"Diet\", y = \"Final Mass (g)\")\nbox_1\n```\n:::\n\n\n## Gridding figures\n\nWith these four different figures created we may now look at how to combine them. By visualising the data in different ways they are able to tell us different parts of the same story. What do we see from the figures below that we may not have seen when looking at each figure individually?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggarrange(line_1, lm_1, histogram_1, box_1, \n          ncol = 2, nrow = 2, # Set number of rows and columns\n          labels = c(\"A\", \"B\", \"C\", \"D\"), # Label each figure\n          common.legend = TRUE) # Create common legend\n```\n:::\n\n\nThe above figure looks great, so let's save a copy of it as a PDF to our computer. In order to do so we will need to assign our figure to an object and then use the `ggsave()` function on that object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First we must assign the code to an object name\ngrid_1 <- ggarrange(lm_1, histogram_1, density_1, violin_1, \n                    ncol = 2, nrow = 2, \n                    labels = c(\"A\", \"B\", \"C\", \"D\"),\n                    common.legend = TRUE)\n\n# Then we save the object we created\nggsave(plot = grid_1, filename = \"figures/grid_1.pdf\")\n```\n:::\n\n\n\nNow that we have seen the basics of **`ggplot2`**, let's take a moment to delve further into the beauty of our figures. It may sound vain at first, but the colour palette of a figure is actually very important. This is for two main reasons. The first being that a consistent colour palette looks more professional. But most importantly it is necessary to have a good colour palette because it makes the information in our figures easier to understand. The communication of information to others is central to good science.\n\n## R Data\n\nBefore we get going on our figures, we first need to learn more about the built in data that R has. The base R program that we all have loaded on our computers already comes with heaps of example dataframes that we may use for practice. We don't need to load our own data. Additionally, whenever we install a new package (and by now we've already installed dozens) it usually comes with several new dataframes. There are many ways to look at the data that we have available from our packages. Below we show two of the many options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To create a list of ALL available data\n  # Not really recommended as the output is overwhelming\ndata(package = .packages(all.available = TRUE))\n\n# To look for datasets within a single known package\n  # type the name of the package followed by '::'\n  # This tells R you want to look in the specified package\n  # When the autocomplete bubble comes up you may scroll\n  # through it with the up and down arrows\n  # Look for objects that have a mini spreadsheet icon\n  # These are the datasets\n\n# Try typing the following code and see what happens...\ndatasets::\n```\n:::\n\n\nWe have an amazing amount of data available to us. So the challenge is not to find a dataframe that works for us, but to just decide on one. My preferred method is to read the short descriptions of the dataframes and pick the one that sounds the funniest. But please use whatever method makes the most sense to you. One note of caution, in R there are generally two different forms of data: wide OR long. We will see in detail what this means on Day 4, and what to do about it. For now we just need to know that **`ggplot2`** works much better with long data. To look at a dataframe of interest we use the same method we would use to look up a help file for a function.\n\nOver the years I've installed so many packages on my computer that it is difficult to chose a dataframe. The package **`boot`** has some particularly interesting dataframes with a biological focus. Please install this now to access to these data. I have decided to load the `urine` dataframe here. Note that `library(boot)` will not work on your computer if you have not installed the package yet. With these data we will now make a scatterplot with two of the variables, while changing the colour of the dots with a third variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load libraries\nlibrary(tidyverse)\nlibrary(boot)\n\n# Load data\nurine <- boot::urine\n\n# Look at help file for more info\n# ?urine\n\n# Create a quick scatterplot\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = cond))\n```\n:::\n\n\nAnd now we have a scatterplot that is showing the relationship between the osmolarity and pH of urine, with the conductivity of those urine samples shown in shades of blue. What is important to note here is that the colour scale is continuous. How can we now this by looking at the figure? Let's look at the same figure but use a discrete variable for colouring.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = as.factor(r)))\n```\n:::\n\n\nWhat is the first thing you notice about the difference in the colours? Why did we use `as.factor()` for the colour aesthetic for our points? What happens if we don't use this? Try it now.\n\n## **`RColorBrewer`**\n\nCentral to the purpose of **`ggplot2`** is the creation of beautiful figures. For this reason there are many built in functions that we may use in order to have precise control over the colours we use, as well as additional packages that extend our options even further. The **`RColorBrewer`** package should have been installed on your computer and activated automatically when we installed and activated the **`tidyverse`**. We will use this package for its lovely colour palettes. Let's spruce up the previous continuous colour scale figure now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The continuous colour scale figure\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = cond)) +\n  scale_colour_distiller() # Change the continuous variable colour palette\n```\n:::\n\n\nDoes this look different? If so, how? The second page of the colour cheat sheet we included in the course material shows some different colour brewer palettes. Let's look at how to use those here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = cond)) +\n  scale_colour_distiller(palette = \"Spectral\")\n```\n:::\n\n\nDoes that help us to see a pattern in the data? What do we see? Does it look like there are any significant relationships here? How would we test that?\n\nIf we want to use colour brewer with a discrete variable we use a slightly different function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = as.factor(r))) +\n  scale_colour_brewer() # This is the different function\n```\n:::\n\n\nThe default colour scale here is not helpful at all. So let's pick a better one. If we look at our cheat sheet we will see a list of different continuous and discrete colour scales. All we need to do is copy and paste one of these names into our colour brewer function with inverted commas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = as.factor(r))) +\n  scale_colour_brewer(palette = \"Set1\") # Here I used \"Set1\", but use what you like\n```\n:::\n\n\n## Make your own palettes\n\nThis is all well and good. But didn't we claim that this should give us complete control over our colours? So far it looks like it has just given us a few more palettes to use. And that's nice, but it's not 'infinite choices'. That is where the Internet comes to our rescue. There are many places we may go to for support in this regard. The following links, in descending order, are very useful. And fun!\n\n- <http://tristen.ca/hcl-picker/#/hlc/6/0.95/48B4B6/345363>\n- <http://tools.medialab.sciences-po.fr/iwanthue/index.php>\n- <http://jsfiddle.net/d6wXV/6/embedded/result/>\n\nI find the first link the easiest to use. But the second and third links are better at generating discrete colour palettes. Take several minutes playing with the different websites and decide for yourself which one(s) you like.\n\n## Use your own palettes\n\nNow that we've had some time to play around with the colour generators let's look at how to use them with our figures. I've used the first web link to create a list of five colours. I then copy and pasted them into the code below, separating them with commas and placing them inside of `c()` and inverted commas. Be certain that you insert commas and inverted commas as necessary or you will get errors. Note also that we are using a new function to use our custom palette.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = cond)) +\n  scale_colour_gradientn(colours = c(\"#A5A94D\", \"#6FB16F\", \"#45B19B\",\n                                    \"#59A9BE\", \"#9699C4\", \"#CA86AD\"))\n```\n:::\n\n\nIf we want to use our custom colour palettes with a discrete colour scale we use a different function as seen in the code below. While we are at it, let's also see how to correct the title of the legend and its text labels. Sometimes the default output is not what we want for our final figure. Especially if we are going to be publishing it. Also note in the following code chunk that rather than using hexadecimal character strings to represent colours in our custom palette, we are simply writing in the human name for the colours we want. This will work for the continuous colour palettes above, too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = urine, aes(x = osmo, y = ph)) +\n  geom_point(aes(colour = as.factor(r))) +\n  scale_colour_manual(values = c(\"pink\", \"maroon\"), # How to use custom palette\n                     labels = c(\"no\", \"yes\")) + # How to change the legend text\n  labs(colour = \"crystals\") # How to change the legend title\n```\n:::\n\n\nSo now we have seen how to control the colours palettes in our figures. I know it is a but much. Four new functions just to change some colours! That's a bummer. Don't forget that one of the main benefits of R is that all of your code is written down, annotated and saved. You don't need to remember which button to click to change the colours, you just need to remember where you saved the code that you will need. And that's pretty great in my opinion.\n\n# Plotting stats\nFirst install the new package `ggpubr`, which contains the functions we may use to seamless plot output statistics for our figures. We will also load some temperature data to use in our demonstration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(ggpubr)\n\n# Data\nSACTN <- read.csv(\"~/Intro_R_Workshop/data/SACTN_data.csv\")\n```\n:::\n\n\n## New functions\nWe will be learning to use two new functions today. The first will be `compare_means()`, which is a function that compares means of two (t-test) or more (ANOVA) groups of values all in one convenient place. The second function is `stat_compare_means()`, which does much the same thing but is designed to be integrated directly into `ggplot2` code.\n\nFirst we will look at the use of `compare_means()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_means(temp~site, data = SACTN, method = \"anova\")\n```\n:::\n\n\nHow snazy is that?! And this works just as well for two mean (t-test) comparisons. It also has built into it the necessary tests for non-parametric comparisons as well as paired tests but we won't show that explicitrly here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_means(temp~site, data = filter(SACTN, site != \"Port Nolloth\"), method = \"t.test\")\n```\n:::\n\n\nThis is great, but it is not new functionality, just drasticaly improved functionality. The second function introduced in this package is what is really going to make our lives easier. Here's why:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SACTN, aes(x = site, y = temp)) +\n  geom_boxplot(aes(colour = site), show.legend = F) +\n  stat_compare_means(method = \"anova\")\n```\n:::\n\n\nI find this to be a very impressive bit of code. The author of this function has devised a way to convince the rather unique `ggplot2` backend to do our dirty work for us and is able to use the x and y axes to calculate statistical analyses. And if that isn't enough, it then goes and puts it on our figure for us! The future is now. Because this is all still happening within the confines of `ggplot2` code, everything can be changed as we desire. The following is just an example, not necessarily the best way to visualise this information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = SACTN, aes(x = site, y = temp)) +\n  geom_boxplot(aes(fill  = site), colour = \"grey40\", show.legend = F) +\n  stat_compare_means(method = \"anova\", aes(label = paste0(\"p \", ..p.format..)), label.x = 2) +\n  theme_bw()\n```\n:::\n\n\n## Further applications\nAs mentioned above, these functions may be used with paired tests, non-parametric tests, and multiple mean tests. These outputs have mates in the `ggplot2` sphere and so may be visualised with relative ease. Below we see an example of how to do this with a multiple mean (ANOVA) test.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First create a list of comparisons to feed into our figure\nSACTN_levels <- levels(SACTN$site)\nmy_comparisons <- list( c(SACTN_levels[1], SACTN_levels[2]), \n                        c(SACTN_levels[2], SACTN_levels[3]),\n                        c(SACTN_levels[1], SACTN_levels[3]))\n\n# And then we wack it all together\nggplot(data = SACTN, aes(x = site, y = temp)) +\n  geom_boxplot(aes(fill  = site), colour = \"grey40\", show.legend = F) +\n  stat_compare_means(method = \"anova\", \n                     label.x = 1.9, label.y = 33) +\n  # Add pairwise comparisons p-value\n  stat_compare_means(comparisons = my_comparisons,\n                     label.y = c(26, 28, 30)) +\n  # Perform t-tests between each group and the overall mean\n  stat_compare_means(label = \"p.signif\", method = \"t.test\",\n                     ref.group = \".all.\") + \n  # Add horizontal line at base mean\n  geom_hline(yintercept = mean(SACTN$temp, na.rm = T), linetype = 2) + \n  labs(y = \"Temp. (°C)\", x = NULL) +\n  theme_bw()\n```\n:::\n\n\nThe above figure shows a boxplot for the distribution of temperatures for each site. The horizontal dashed line shows what the overall mean for all temperatures is. The little asterisks above each box show the siginificance value of the difference of this group (site) from the mean temperature (dashed line). Four asterisks means _p_<0.001. The pairwise comparisons of each site are shown with black brackets, the text on top of which show the _p_-values of those comparisons. The text at the very top of the figure shows the overall _p_-value for the ANOVA that compared all means against one another. Generally though one would not want to show all of this information in one figure. THis just serves as an example of how straightforward it is to do so.\n\nFor a more detailed explanation for how to perform more advanced comaprisons of multiple groups (especially paired comparisons), and how to plot all of those results in a very cunning way, one may follow this link: <https://www.r-bloggers.com/add-p-values-and-significance-levels-to-ggplots/>. \n\n## DIY figures\n\nToday we learned the basics of **`ggplot2`**, how to facet, how to brew colours, and how to plot stats. Sjog, that's a lot of stuff to remember! Which is why we will now spend the rest of Day 2 putting our new found skills to use. Please group up as you see fit to produce your very own **`ggplot2`** figures. We've not yet learned how to manipulate/tidy up our data so it may be challenging to grab any ol' dataset and make a plan with it. To that end we recommend using the `laminaria` or `ecklonia` datasets we saw on Day 1. You are of course free to use whatever dataset you would like, including your own. The goal by the end of today is to have created at least two figures (first prize for four figures) and join them together via faceting. We will be walking the room to help with any issues that may arise.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}