---
# title: Mapping with **`ggplot2`**
format:
  revealjs:
    theme: FACE-IT_pres.scss
    self-contained: true
    transition: slide
editor: source
---

# Mapping with **`ggplot2`** {background-color="#008980" style="text-align: center"}

*Robert Schlegel*

```{r maps-1-opts, echo=FALSE}
knitr::opts_chunk$set(
  warning = FALSE, 
  message = FALSE,
  echo = TRUE,
  eval = FALSE
)
```

## Problem

* Where do we start?
* What if we need to inset a map?
* How do we show scale?

## Solution

* **`tidyverse`** contains a wealth of mapping support
* Maps are created the same as basic plots, so van be combined
* **`ggsn`** provides code for scale bars etc.

## Setup

```{r map-load}
library(tidyverse) # Contains most of what we need

library(ggpubr) # For combining figures

library(ggsn) # Contains code to make scale bars
```

## Default map: `borders()`

```{r}
ggplot() +
  borders() + # The global shape file
  coord_equal() # Equal sizing for lon/lat 
```

## Cropping

```{r}
sval_1 <- ggplot() +
  borders(fill = "grey70", colour = "black") +
  coord_equal(xlim = c(8, 30), ylim = c(76, 82), expand = 0) # Force lon/lat extent
sval_1
```

## A new concept?

The idea of creating a map in R may be daunting to some, but remember that a basic map is nothing more than a simple figure with an x and y axis. We tend to think of maps as different from other scientific figures, whereas in reality they are created the exact same way. Let's compare a dot plot of the penguin weight data against a dot plot of the coastline of South Africa.

Chicken dots:

```{r map-point-1, fig.cap="Dot plot of chicken weight data."}
ggplot(data = ChickWeight, aes(x = Time, y = weight)) +
  geom_point()
```

South African coast dots:

```{r map-point-2, fig.cap="Dot plot off South African coast."}
ggplot(data = south_africa_coast, aes(x = lon, y = lat)) +
  geom_point()
```

Does that look familiar? Notice how the x and y axis tick labels look the same as any map you would see in an atlas. This is because they are. But this isn't a great way to create a map. Rather it is better to represent the land mass with a polygon. With **`ggplot2`** this is a simple task.

## Specific labels

A map is almost always going to need some labels and other visual cues. We saw in the previous section how to add site labels. The following code chunk shows how this differs if we want to add just one label at a time. This can be useful if each label needs to be different from all other labels for whatever reason. We may also see that the text labels we are creating have `\n` in them. When R sees these two characters together like this it reads this as an instruction to return down a line. Let's run the code to make sure we see what this means.

```{r maps-labels, fig.cap="Map of southern Africa with specific labels."}
sa_2 <- sa_1 +
  annotate("text", label = "Atlantic\nOcean", 
           x = 15.1, y = -32.0, 
           size = 5.0, 
           angle = 30, 
           colour = "navy") +
  annotate("text", label = "Indian\nOcean", 
           x = 33.2, y = -34.2, 
           size = 5.0, 
           angle = 330, 
           colour = "springgreen")
sa_2
```

## Scale bars

With our fancy labels added, let's insert a scale bar next. There is no default scale bar function in the **`tidyverse`**, which is why we have loaded the **`ggsn`** package. This package is devoted to adding scale bars and North arrows to **`ggplot2`** figures. There are heaps of options so we'll just focus on one of them for now. It is a bit finicky so to get it looking exactly how we want it requires some guessing and checking. Please feel free to play around with the coordinates below. We may see the list of available North arrow shapes by running `northSymbols()`.

```{r maps-scale, fig.cap="Map of southern Africa with labels and a scale bar."}
sa_3 <- sa_2 +
  scalebar(x.min = 22, x.max = 26, y.min = -36, y.max = -35, # Set location of bar
           dist = 200, height = 1, st.dist = 0.8, st.size = 4, # Set particulars
           dd2km = TRUE, model = "WGS84") + # Set appearance
  north(x.min = 22.5, x.max = 25.5, y.min = -33, y.max = -31, # Set location of symbol
        scale = 1.2, symbol = 16)
sa_3
```

## Insetting

In order to inset a smaller map inside of a larger map we must first create the smaller map. We have already loaded just such a map of Africa so we will use that for this example.

```{r maps-mini, fig.align = "center"}
africa_map
```

And now to inset this map of Africa into our map of southern Africa we will need to learn how to create a 'grob'. This is very simple and does not require any extra work on our part. Remember that **`ggplot2`** objects are different from normal objects (i.e. dataframes), and that they have their own way of storing and accessing data. In order to convert any sort of thing into a format that ggplot understands we convert it into a grob, as shown below. Once converted, we may then plop it onto our figure/map wherever we please. Both of these steps are accomplished with the single function `annotation_custom()`. This is also a good way to add logos or any other sort of image to a map/figure. You can really go completely bananas. It's even possible to add GIFs. Such happy. Much excite. Very wonderment.

```{r maps-inset, fig.cap="Map of southern Africa, with labels, scale bar, and an inset map of Africa."}
sa_4 <- sa_3 +
  annotation_custom(grob = ggplotGrob(africa_map),
                    xmin = 20.9, xmax = 26.9,
                    ymin = -30, ymax = -24)
sa_4
```

## Rounding it out

There are a lot of exciting things going on in our figure now. To round out our adventures in mapping let's tweak the lon/lat labels to a more prestigious convention. There are two ways to do this. One of which requires us to install the **`scales`** package. Don't worry, it's a small one!

```{r maps-final, fig.cap="The final map with all of the bells and whistles."}
sa_final <- sa_4 +
  scale_x_continuous(breaks = seq(16, 32, 4),
                     labels = c("16°E", "20°E", "24°E", "28°E", "32°E"),
                     position = "bottom") +
  scale_y_continuous(breaks = seq(-36, -24, 4),
                     labels = c("36.0°S", "32.0°S", "28.0°S", "24.0°S"),
                     position = "right") +
  labs(x = "", y = "")
sa_final
```

And lastly we save the fruits of our labours.

```{r maps-final-save, eval=FALSE}
ggsave(plot = sa_final, filename = "figures/southern_africa_final.pdf", 
       height = 6, width = 8)
```

